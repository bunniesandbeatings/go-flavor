{"name":"Go-flavor","tagline":"Go Flavor for Structure 101","body":"# Structure 101 Golang flavor\r\n\r\nThis is a Golang flavor for the [Structure 101](https://structure101.com/) static analysis and architectural decision making tool. \r\n\r\nNote: If you're wondering where the code for the runner lives, it's [here](https://github.com/bunniesandbeatings/go-flavor-parser).\r\n\r\n## Why?\r\n\r\nI used Structure 101 in the past, on Actionscript and Java projects. It was fantastic, really helped me recognize flaws in my dependency tree. Many people miss the value of a well structured, cycle-free dependency tree. For me, it's central to producing code that is easy to reason about.\r\n\r\nFor many years, I've been primarily a Ruby developer. Unfortunately, Ruby's dynamicism does not lend itself well to static analysis, and I've aborted my attempt to produce a Ruby flavor for Structure 101.  \r\n\r\nI'm also developing in Go more and more, not so much by choice but because it fits the needs of products I work with. So despite my misgivings about the expressiveness of Go, I still want to have great tools for working with it. This Structure 101 flavor is one of them.\r\n\r\n## Currently\r\n\r\nNot much here yet. A simple flavor you have to download, build the binary dependency for, and put in your struct101g folder. It only reads package level dependencies from your app at the moment. \r\n\r\n## Plans\r\n\r\n  0. Runner binaries for osx, linux and windows\r\n  0. Tests! Currently this code is a [Spike](http://agiledictionary.com/209/spike/). I'm a TDD guy, but with severe limitations on my time and weak Golang skills, I'm just hacking to prove value. I want to throw my code out and rewrite it with tests driving out the design.\r\n  0. CI, probably on CircleCI.\r\n  0. Node types:\r\n    0. Package (Done!)\r\n      0. Constant\r\n      0. Variable\r\n      0. Function\r\n    0. Type (struct/interface)\r\n      0. Public field\r\n      0. Function\r\n  0. Dependency types:\r\n    0. Import (Done!)\r\n    0. Variable/Const type definition\r\n    0. Field type Definition\r\n    0. Parameter type definition\r\n    0. Return type definition\r\n    0. Function calls\r\n    0. Casts\r\n\r\n## Installation\r\nCurrently this is only tested on OSX. It should work on any *nix with a bash shell.\r\n\r\n0. Install go and make sure your GOPATH is set up\r\n0. Download and build\r\n\r\n  ```shell\r\n  git clone https://github.com/bunniesandbeatings/go-flavor\r\n  cd go-flavor\r\n  ./scripts/build\r\n  ```\r\n  \r\n0. Symlink into Struct101g (if you cant find the struct101g folder, run struct101g first and install one of the other flavors)\r\n\r\n  ```shell\r\n  ln -s `pwd` $HOME/structure101g/flavors/com.bunniesandbeatings.go-flavor_0.0.1\r\n  ```\r\n\r\n0. You must restart Structure 101g, it should have a new Project type under 'New Project' for the Go flavor.\r\n\r\n## Usage \r\n\r\n0. In Structure 101g, create a new project\r\n0. Select the \"com.bunniesandbeatings.go-flavor\" project type\r\n0. click Next\r\n0. For '$GOPATH', enter your gopath. Unfortunately Structure 101g doesn't run the flavor's runner using your shell environment.\r\n0. For 'Package Definition', use a package ref as described by ```go help packages```\r\n  0. For example ```github.com/bunniesandbeatings/go-flavor-parser/...```\r\n\r\n\r\n# Project backlog\r\n\r\nMaintained on the [go-flavor Pivotal Tracker project](https://www.pivotaltracker.com/n/projects/1265846)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}